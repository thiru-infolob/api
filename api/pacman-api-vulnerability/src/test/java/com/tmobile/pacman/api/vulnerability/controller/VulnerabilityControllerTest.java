package com.tmobile.pacman.api.vulnerability.controller;
/*******************************************************************************
 * Copyright 2018 T Mobile, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/

import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyBoolean;
import static org.mockito.Matchers.anyObject;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.anyMap;
import static org.mockito.Matchers.anyListOf;
import static org.powermock.api.mockito.PowerMockito.when;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.tmobile.pacman.api.commons.exception.DataException;
import com.tmobile.pacman.api.commons.exception.ServiceException;
import com.tmobile.pacman.api.vulnerability.controller.VulnerabilityController;
import com.tmobile.pacman.api.vulnerability.domain.Request;
import com.tmobile.pacman.api.vulnerability.domain.TrendNote;
import com.tmobile.pacman.api.vulnerability.domain.TrendRequest;
import com.tmobile.pacman.api.vulnerability.service.VulnerabilityService;

@RunWith(PowerMockRunner.class)
public class VulnerabilityControllerTest {

	@InjectMocks
	VulnerabilityController vulnerabilityController;

	@Mock
	VulnerabilityService vulnerabilityService;

	@Test
	public void getVulnerabilitiesDetailsTest() throws Exception {

		List<Map<String, Object>> vulnDetails = new ArrayList<>();

		Request request = new Request();
		request.setAg("ag");
		request.setFrom(0);

		when(vulnerabilityService.getVulnerabilitiesDetails(anyString(), anyObject())).thenReturn(new ArrayList<>());
		when(vulnerabilityService.filterMatchingCollectionElements(anyObject(), anyString(), anyBoolean()))
				.thenReturn(new ArrayList<>());

		assertTrue(vulnerabilityController.getVulnerabilitiesDetails(request).getStatusCode() == HttpStatus.OK);

		request.setFilter(new HashMap<>());
		vulnDetails.add(new HashMap<>());
		vulnDetails.add(new HashMap<>());

		when(vulnerabilityService.getVulnerabilitiesDetails(anyString(), anyObject())).thenReturn(new ArrayList<>());
		when(vulnerabilityService.filterMatchingCollectionElements(anyObject(), anyString(), anyBoolean()))
				.thenReturn(vulnDetails);

		assertTrue(vulnerabilityController.getVulnerabilitiesDetails(request).getStatusCode() == HttpStatus.OK);

		request.setSize(1);
		when(vulnerabilityService.getVulnerabilitiesDetails(anyString(), anyObject())).thenReturn(new ArrayList<>());
		when(vulnerabilityService.filterMatchingCollectionElements(anyObject(), anyString(), anyBoolean()))
				.thenReturn(vulnDetails);

		assertTrue(vulnerabilityController.getVulnerabilitiesDetails(request).getStatusCode() == HttpStatus.OK);

		request.setSize(3);
		when(vulnerabilityService.getVulnerabilitiesDetails(anyString(), anyObject())).thenReturn(new ArrayList<>());
		when(vulnerabilityService.filterMatchingCollectionElements(anyObject(), anyString(), anyBoolean()))
				.thenReturn(vulnDetails);

		assertTrue(vulnerabilityController.getVulnerabilitiesDetails(request).getStatusCode() == HttpStatus.OK);
	}

	@Test
	public void getVulnerabilitiesDetailsTest_Failure() throws Exception {

		Request request = new Request();

		assertTrue(vulnerabilityController.getVulnerabilitiesDetails(request)
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);

		request.setAg("ag");
		request.setFrom(-1);

		assertTrue(vulnerabilityController.getVulnerabilitiesDetails(request)
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);

		request.setFrom(2);
		List<Map<String, Object>> vulnDetails = new ArrayList<Map<String, Object>>();
		vulnDetails.add(new HashMap<>());

		when(vulnerabilityService.getVulnerabilitiesDetails(anyString(), anyObject())).thenReturn(new ArrayList<>());
		when(vulnerabilityService.filterMatchingCollectionElements(anyObject(), anyString(), anyBoolean()))
				.thenReturn(vulnDetails);

		assertTrue(vulnerabilityController.getVulnerabilitiesDetails(request)
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void getCertificatesDetailsTest_Exception() throws Exception {

		Request request = new Request();
		request.setAg("ag");
		request.setFrom(0);

		when(vulnerabilityService.getVulnerabilitiesDetails(anyString(), anyObject()))
				.thenThrow(new ServiceException());
		assertTrue(vulnerabilityController.getVulnerabilitiesDetails(request)
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void getVulnerabilitysummaryTest() throws Exception {

		when(vulnerabilityService.getVulnerabilitySummary(anyString(), anyString())).thenReturn(new HashMap<>());
		assertTrue(vulnerabilityController.getVulnerabilitysummary("ag", "3,4,5").getStatusCode() == HttpStatus.OK);
	}

	@Test
	public void getVulnerabilitysummaryTest_Exception() throws Exception {

		assertTrue(vulnerabilityController.getVulnerabilitysummary("", "3,4,5")
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);

		when(vulnerabilityService.getVulnerabilitySummary(anyString(), anyString())).thenThrow(new ServiceException());
		assertTrue(vulnerabilityController.getVulnerabilitysummary("ag", "3,4,5")
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void getVulnerabilityByApplicationsTest() throws Exception {

		when(vulnerabilityService.getVulnerabilityByAppAndEnv(anyString(), anyString(), anyString()))
				.thenReturn(new ArrayList<>());
		assertTrue(vulnerabilityController.getVulnerabilityByApplications("ag").getStatusCode() == HttpStatus.OK);
	}

	@Test
	public void getVulnerabilityByApplicationsTest_Exception() throws Exception {

		assertTrue(vulnerabilityController.getVulnerabilityByApplications("")
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);

		when(vulnerabilityService.getVulnerabilityByAppAndEnv(anyString(), anyString(), anyString()))
				.thenThrow(new Exception());
		assertTrue(vulnerabilityController.getVulnerabilityByApplications("ag")
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void getVulnerabilitiesTrendTest() throws Exception {

		TrendRequest request = new TrendRequest();
		request.setAg("ag");

		when(vulnerabilityService.getVulnerabilityTrend(anyString(), anyObject(), anyObject(), anyObject()))
				.thenReturn(new ArrayList<>());
		assertTrue(vulnerabilityController.getVulnerabilitiesTrend(request).getStatusCode() == HttpStatus.OK);

		request.setFrom(new Date());
		when(vulnerabilityService.getVulnerabilityTrend(anyString(), anyObject(), anyObject(), anyObject()))
				.thenReturn(new ArrayList<>());
		assertTrue(vulnerabilityController.getVulnerabilitiesTrend(request).getStatusCode() == HttpStatus.OK);

		request.setTo(new Date());
		when(vulnerabilityService.getVulnerabilityTrend(anyString(), anyObject(), anyObject(), anyObject()))
				.thenReturn(new ArrayList<>());
		assertTrue(vulnerabilityController.getVulnerabilitiesTrend(request).getStatusCode() == HttpStatus.OK);

		request = new TrendRequest();
		request.setAg("ag");
		request.setTo(new Date());
		when(vulnerabilityService.getVulnerabilityTrend(anyString(), anyObject(), anyObject(), anyObject()))
				.thenReturn(new ArrayList<>());
		assertTrue(vulnerabilityController.getVulnerabilitiesTrend(request).getStatusCode() == HttpStatus.OK);
	}

	@Test
	public void getVulnerabilitiesTrendTest_Exception() throws Exception {

		TrendRequest request = new TrendRequest();
		assertTrue(vulnerabilityController.getVulnerabilitiesTrend(request)
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);

		request.setAg("ag");
		when(vulnerabilityService.getVulnerabilityTrend(anyString(), anyObject(), anyObject(), anyObject()))
				.thenThrow(new ServiceException());
		assertTrue(vulnerabilityController.getVulnerabilitiesTrend(request)
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void getVulnerabilityByEnvironmentTest() throws Exception {

		when(vulnerabilityService.getVulnerabilityByAppAndEnv(anyString(), anyString(), anyString()))
				.thenReturn(new ArrayList<>());
		assertTrue(vulnerabilityController.getVulnerabilityByEnvironment("ag", "app").getStatusCode() == HttpStatus.OK);
	}

	@Test
	public void getVulnerabilityByEnvironmentTest_Exception() throws Exception {

		assertTrue(vulnerabilityController.getVulnerabilityByEnvironment("", null)
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);

		when(vulnerabilityService.getVulnerabilityByAppAndEnv(anyString(), anyString(), anyString()))
				.thenThrow(new Exception());
		assertTrue(vulnerabilityController.getVulnerabilityByEnvironment("ag", "app")
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void getVulnerabilityDistributionTest() throws Exception {

		when(vulnerabilityService.getVulnerabilitiesDistribution(anyString())).thenReturn(new ArrayList<>());
		assertTrue(vulnerabilityController.getVulnerabilityDistribution("ag").getStatusCode() == HttpStatus.OK);
	}

	@Test
	public void getVulnerabilityDistributionTest_Exception() throws Exception {

		assertTrue(vulnerabilityController.getVulnerabilityDistribution("")
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);

		when(vulnerabilityService.getVulnerabilitiesDistribution(anyString())).thenThrow(new ServiceException());
		assertTrue(vulnerabilityController.getVulnerabilityDistribution("ag")
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void getVulnerabilitysummaryByResourceIdTest() throws Exception {

		when(vulnerabilityService.getVulnerabilitysummaryByResourceId(anyString())).thenReturn(new HashMap<>());
		assertTrue(vulnerabilityController.getVulnerabilitysummaryByResourceId("ag").getStatusCode() == HttpStatus.OK);
	}

	
	/*@Test
	public void getVulnerabilitysummaryByResourceIdTest_Exception() throws Exception {

		when(vulnerabilityService.getVulnerabilitysummaryByResourceId(anyString())).thenThrow(new Exception());
		assertTrue(vulnerabilityController.getVulnerabilitysummaryByResourceId("ag").getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}
	 */

	@Test
	public void getVulnerabilityDetailsByResourceIdTest() throws Exception {

		when(vulnerabilityService.getVulnerabilityDetailsByResourceId(anyString())).thenReturn(new ArrayList<>());
		when(vulnerabilityService.filterMatchingCollectionElements(anyObject(), anyString(), anyBoolean()))
				.thenReturn(new ArrayList<>());

		assertTrue(vulnerabilityController.getVulnerabilityDetailsByResourceId("id", "search", 0, 0)
				.getStatusCode() == HttpStatus.OK);
		assertTrue(vulnerabilityController.getVulnerabilityDetailsByResourceId("id", "search", null, null)
				.getStatusCode() == HttpStatus.OK);

		List<Map<String, Object>> resourceDetails = new ArrayList<>();
		resourceDetails.add(new HashMap<>());
		resourceDetails.add(new HashMap<>());

		when(vulnerabilityService.filterMatchingCollectionElements(anyObject(), anyString(), anyBoolean()))
				.thenReturn(resourceDetails);
		assertTrue(vulnerabilityController.getVulnerabilityDetailsByResourceId("id", "search", 0, 0)
				.getStatusCode() == HttpStatus.OK);

		when(vulnerabilityService.filterMatchingCollectionElements(anyObject(), anyString(), anyBoolean()))
				.thenReturn(resourceDetails);
		assertTrue(vulnerabilityController.getVulnerabilityDetailsByResourceId("id", "search", 0, 1)
				.getStatusCode() == HttpStatus.OK);

		when(vulnerabilityService.filterMatchingCollectionElements(anyObject(), anyString(), anyBoolean()))
				.thenReturn(resourceDetails);
		assertTrue(vulnerabilityController.getVulnerabilityDetailsByResourceId("id", "search", 0, 3)
				.getStatusCode() == HttpStatus.OK);
	}

	@Test
	public void getVulnerabilityDetailsByResourceIdTest_Exception() throws Exception {

		List<Map<String, Object>> resourceDetails = new ArrayList<>();
		resourceDetails.add(new HashMap<>());

		when(vulnerabilityService.getVulnerabilityDetailsByResourceId(anyString())).thenReturn(new ArrayList<>());
		when(vulnerabilityService.filterMatchingCollectionElements(anyObject(), anyString(), anyBoolean()))
				.thenReturn(resourceDetails);
		assertTrue(vulnerabilityController.getVulnerabilityDetailsByResourceId("id", "search", 2, 3)
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);

		when(vulnerabilityService.filterMatchingCollectionElements(anyObject(), anyString(), anyBoolean()))
				.thenThrow(new ServiceException());
		assertTrue(vulnerabilityController.getVulnerabilityDetailsByResourceId("id", "search", 0, 1)
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void getAgingSummaryTest() throws Exception {

		when(vulnerabilityService.getAgingSummary(anyString())).thenReturn(new ArrayList<>());
		assertTrue(vulnerabilityController.getAgingSummary("ag").getStatusCode() == HttpStatus.OK);
	}

	@Test
	public void getVulnerabilityByQidTest() throws Exception {

		when(vulnerabilityService.getVulnerabilityByQid(anyString())).thenReturn(new ArrayList<>());
		assertTrue(vulnerabilityController.getVulnerabilityByQid("qid").getStatusCode() == HttpStatus.OK);
	}

	@Test
	public void getDistributionSummaryByVulnTypeTest() throws Exception {

		when(vulnerabilityService.getDistributionSummaryByVulnType(anyString(), anyString()))
				.thenReturn(new ArrayList<>());

		ResponseEntity<Object> responseObj = vulnerabilityController.getDistributionSummaryByVulnType("ag", "3");
		assertTrue(responseObj.getStatusCode() == HttpStatus.OK);
	}

	@Test
	public void getDistributionSummaryByVulnTypeTest_Exception() throws Exception {

		when(vulnerabilityService.getDistributionSummaryByVulnType(anyString(), anyString()))
				.thenThrow(new DataException());

		ResponseEntity<Object> responseObj = vulnerabilityController.getDistributionSummaryByVulnType("ag", "3");
		assertTrue(responseObj.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void getDistributionSummaryByInfraTypeTest() throws Exception {

		when(vulnerabilityService.getDistributionSummaryByInfraType(anyString(), anyString()))
				.thenReturn(new ArrayList<>());

		ResponseEntity<Object> responseObj = vulnerabilityController.getDistributionSummaryByInfraType("ag", "3");
		assertTrue(responseObj.getStatusCode() == HttpStatus.OK);
	}

	@Test
	public void getDistributionSummaryByInfraTypeTest_Exception() throws Exception {

		when(vulnerabilityService.getDistributionSummaryByInfraType(anyString(), anyString()))
				.thenThrow(new ServiceException());

		ResponseEntity<Object> responseObj = vulnerabilityController.getDistributionSummaryByInfraType("ag", "3");
		assertTrue(responseObj.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void getDistributionSummaryByEnvTest() throws Exception {

		when(vulnerabilityService.getDistributionSummaryByEnv(anyString(), anyString())).thenReturn(new ArrayList<>());

		ResponseEntity<Object> responseObj = vulnerabilityController.getDistributionSummaryByEnv("ag", "3");
		assertTrue(responseObj.getStatusCode() == HttpStatus.OK);
	}

	@Test
	public void getDistributionSummaryByEnvTest_Exception() throws Exception {

		when(vulnerabilityService.getDistributionSummaryByEnv(anyString(), anyString()))
				.thenThrow(new ServiceException());

		ResponseEntity<Object> responseObj = vulnerabilityController.getDistributionSummaryByEnv("ag", "3");
		assertTrue(responseObj.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void getRemediationActionsSummaryTest() throws Exception {

		when(vulnerabilityService.getRemediationActionsSummary(anyString(), anyString())).thenReturn(new ArrayList<>());

		ResponseEntity<Object> responseObj = vulnerabilityController.getRemediationActionsSummary("ag", "3");
		assertTrue(responseObj.getStatusCode() == HttpStatus.OK);
	}

	@Test
	public void getRemediationActionsSummaryTest_Exception() throws Exception {

		when(vulnerabilityService.getRemediationActionsSummary(anyString(), anyString()))
				.thenThrow(new DataException());

		ResponseEntity<Object> responseObj = vulnerabilityController.getRemediationActionsSummary("ag", "3");
		assertTrue(responseObj.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void getV1HighestLowestPeformersTest() throws Exception {

		Map<String, Integer> directorData = new HashMap<>();
		directorData.put("dir1", 1);
		directorData.put("dir2", 2);

		when(vulnerabilityService.getHighestLowestPerformers(anyString(), anyString(), anyString()))
				.thenReturn(directorData);
		assertTrue(vulnerabilityController.getHighestLowestPerformers("ag", "3").getStatusCode() == HttpStatus.OK);

		directorData.put("dir3", 3);

		when(vulnerabilityService.getHighestLowestPerformers(anyString(), anyString(), anyString()))
				.thenReturn(directorData);
		assertTrue(vulnerabilityController.getHighestLowestPerformers("ag", "3").getStatusCode() == HttpStatus.OK);

		directorData.put("dir4", 4);
		directorData.put("dir5", 5);
		directorData.put("dir6", 6);
		directorData.put("dir7", 7);
		directorData.put("dir8", 8);
		directorData.put("dir9", 9);
		directorData.put("dir10", 10);
		directorData.put("dir11", 11);
		directorData.put("dir12", 12);

		when(vulnerabilityService.getHighestLowestPerformers(anyString(), anyString(), anyString()))
				.thenReturn(directorData);
		assertTrue(vulnerabilityController.getHighestLowestPerformers("ag", "3").getStatusCode() == HttpStatus.OK);

	}

	@Test
	public void getV2HighestLowestPeformersTest() throws Exception {

		Map<String, Integer> directorData = new HashMap<>();
		directorData.put("dir1", 1);
		directorData.put("dir2", 2);

		when(vulnerabilityService.getHighestLowestPerformers(anyString(), anyString(), anyString()))
				.thenReturn(directorData);
		assertTrue(vulnerabilityController.getHighestLowestPerformers("ag", "3", PerfType.org)
				.getStatusCode() == HttpStatus.OK);
		assertTrue(vulnerabilityController.getHighestLowestPerformers("ag", "3", PerfType.application)
				.getStatusCode() == HttpStatus.OK);
		assertTrue(vulnerabilityController.getHighestLowestPerformers("ag", "3", PerfType.environment)
				.getStatusCode() == HttpStatus.OK);
	}

	@Test
	public void getVulerabilityTrendTest() throws Exception {

		TrendRequest request = new TrendRequest();
		request.setAg("ag");

		when(vulnerabilityService.getVulnerabilityNewOpenTrend(anyString(), anyString(), anyObject()))
				.thenReturn(new ArrayList<>());

		ResponseEntity<Object> responseObj = vulnerabilityController.getVulnerabilityTrend(request);
		assertTrue(responseObj.getStatusCode() == HttpStatus.OK);

		request.setFrom(new Date());
		request.setFilter(new HashMap<>());

		when(vulnerabilityService.getVulnerabilityNewOpenTrend(anyString(), anyString(), anyObject()))
				.thenReturn(new ArrayList<>());

		ResponseEntity<Object> response1Obj = vulnerabilityController.getVulnerabilityTrend(request);
		assertTrue(response1Obj.getStatusCode() == HttpStatus.OK);

		Map<String, String> filter = new HashMap<>();
		filter.put("severity", "3");
		request.setFilter(filter);
		when(vulnerabilityService.getVulnerabilityNewOpenTrend(anyString(), anyString(), anyObject()))
				.thenReturn(new ArrayList<>());

		ResponseEntity<Object> response2Obj = vulnerabilityController.getVulnerabilityTrend(request);
		assertTrue(response2Obj.getStatusCode() == HttpStatus.OK);
	}

	@Test
	public void getVulerabilityTrendTest_Failure() throws Exception {

		TrendRequest request = new TrendRequest();

		ResponseEntity<Object> responseObj = vulnerabilityController.getVulnerabilityTrend(request);
		assertTrue(responseObj.getStatusCode() == HttpStatus.EXPECTATION_FAILED);

		request.setAg("ag");
		when(vulnerabilityService.getVulnerabilityNewOpenTrend(anyString(), anyString(), anyObject()))
				.thenThrow(new Exception());

		ResponseEntity<Object> response1 = vulnerabilityController.getVulnerabilityTrend(request);
		assertTrue(response1.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void createTrendAnnotationTest() throws Exception {

		when(vulnerabilityService.createTrendAnnotation(anyObject())).thenReturn(true);
		assertTrue(vulnerabilityController.createTrendAnnotation(new TrendNote()).getStatusCode() == HttpStatus.OK);

		when(vulnerabilityService.createTrendAnnotation(anyObject())).thenReturn(false);
		assertTrue(vulnerabilityController.createTrendAnnotation(new TrendNote())
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void getTrendAnnotationsTest() throws Exception {

		when(vulnerabilityService.getTrendAnnotations(anyString(), any(Date.class))).thenReturn(new ArrayList<>());
		assertTrue(vulnerabilityController.getTrendAnnotations("ag", new Date()).getStatusCode() == HttpStatus.OK);

		when(vulnerabilityService.getTrendAnnotations(anyString(), any(Date.class))).thenReturn(new ArrayList<>());
		assertTrue(vulnerabilityController.getTrendAnnotations("ag", null).getStatusCode() == HttpStatus.OK);

		when(vulnerabilityService.getTrendAnnotations(anyString(), any(Date.class))).thenThrow(new DataException());
		assertTrue(vulnerabilityController.getTrendAnnotations("ag", new Date())
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void deleteTrendAnnotationTest() throws Exception {

		when(vulnerabilityService.deleteTrendAnnotation(anyString())).thenReturn(true);
		assertTrue(vulnerabilityController.deleteTrendAnnotation("noteId").getStatusCode() == HttpStatus.OK);

		when(vulnerabilityService.deleteTrendAnnotation(anyString())).thenReturn(false);
		assertTrue(vulnerabilityController.deleteTrendAnnotation("noteId")
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void getVulnerabilityAssetsTrendTest() throws Exception {

		TrendRequest request = new TrendRequest();
		request.setAg("ag");

		when(vulnerabilityService.getVulnerabilityAssetsTrend(anyString(), anyString(), anyObject()))
				.thenReturn(new ArrayList<>());

		ResponseEntity<Object> responseObj = vulnerabilityController.getVulnerabilityAssetsTrend(request);
		assertTrue(responseObj.getStatusCode() == HttpStatus.OK);

		request.setFrom(new Date());
		request.setFilter(new HashMap<>());

		when(vulnerabilityService.getVulnerabilityAssetsTrend(anyString(), anyString(), anyObject()))
				.thenReturn(new ArrayList<>());

		ResponseEntity<Object> response1Obj = vulnerabilityController.getVulnerabilityAssetsTrend(request);
		assertTrue(response1Obj.getStatusCode() == HttpStatus.OK);

		Map<String, String> filter = new HashMap<>();
		filter.put("severity", "3");
		request.setFilter(filter);
		when(vulnerabilityService.getVulnerabilityAssetsTrend(anyString(), anyString(), anyObject()))
				.thenReturn(new ArrayList<>());

		ResponseEntity<Object> response2Obj = vulnerabilityController.getVulnerabilityAssetsTrend(request);
		assertTrue(response2Obj.getStatusCode() == HttpStatus.OK);
	}

	@Test
	public void getVulnerabilityAssetsTrendTest_Failure() throws Exception {

		TrendRequest request = new TrendRequest();

		ResponseEntity<Object> responseObj = vulnerabilityController.getVulnerabilityAssetsTrend(request);
		assertTrue(responseObj.getStatusCode() == HttpStatus.EXPECTATION_FAILED);

		request.setAg("ag");
		when(vulnerabilityService.getVulnerabilityAssetsTrend(anyString(), anyString(), anyObject()))
				.thenThrow(new DataException());

		ResponseEntity<Object> response1 = vulnerabilityController.getVulnerabilityAssetsTrend(request);
		assertTrue(response1.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@Test
	public void getVulnerabilitySummaryByAssetsTest() throws Exception {

		when(vulnerabilityService.getVulnerabilitySummaryByAssets(anyString())).thenReturn(new HashMap<>());
		assertTrue(vulnerabilityController.getVulnerabilitySummaryByAssets("ag").getStatusCode() == HttpStatus.OK);

		when(vulnerabilityService.getVulnerabilitySummaryByAssets(anyString())).thenThrow(new DataException());
		assertTrue(vulnerabilityController.getVulnerabilitySummaryByAssets("ag")
				.getStatusCode() == HttpStatus.EXPECTATION_FAILED);
	}

	@SuppressWarnings("unchecked")
	@Test
	public void getVulnerabilitiesOccurrencesTest() throws Exception {

		List<Map<String, Object>> vulnDetails = new ArrayList<>();

		Request request = new Request();
		request.setAg("ag");
		request.setFrom(0);
		Map<String, String> filter = new HashMap<>();
		filter.put("severity", "3");
		request.setFilter(filter);

		when(vulnerabilityService.vulnerabilityAssetCount(anyString(), anyMap(), anyString(),anyString(),anyInt(), anyInt())).thenReturn(10);
		when(vulnerabilityService.getAllVulnerabilitiesDetailsByAssetGroup(anyString(), anyMap(),anyString(),anyString(),anyString(), anyInt(), anyInt()))
				.thenReturn(vulnDetails);

		assertTrue(vulnerabilityController.getVulnerabilitiesOccurrences(request)
				.getStatusCode() == HttpStatus.OK);

		request.setFilter(new HashMap<>());
		vulnDetails.add(new HashMap<>());
		vulnDetails.add(new HashMap<>());

		when(vulnerabilityService.vulnerabilityAssetCount(anyString(), anyMap(),anyString(),anyString() ,anyInt(), anyInt())).thenReturn(10);
		when(vulnerabilityService.getAllVulnerabilitiesDetailsByAssetGroup(anyString(), anyMap(),anyString(),anyString(),anyString(), anyInt(), anyInt()))
				.thenReturn(vulnDetails);

		assertTrue(vulnerabilityController.getVulnerabilitiesOccurrences(request)
				.getStatusCode() == HttpStatus.OK);

		request.setSize(0);
		when(vulnerabilityService.vulnerabilityAssetCount(anyString(), anyMap(),anyString(),anyString(), anyInt(), anyInt())).thenReturn(10);
		when(vulnerabilityService.getAllVulnerabilitiesDetailsByAssetGroup(anyString(), anyMap(),anyString(),anyString(),anyString(), anyInt(), anyInt()))
				.thenReturn(vulnDetails);

		assertTrue(vulnerabilityController.getVulnerabilitiesOccurrences(request)
				.getStatusCode() == HttpStatus.OK);

		request.setSize(3);
		when(vulnerabilityService.vulnerabilityAssetCount(anyString(), anyMap(),anyString(),anyString(), anyInt(), anyInt())).thenReturn(10);
		when(vulnerabilityService.getAllVulnerabilitiesDetailsByAssetGroup(anyString(), anyMap(), anyString(),anyString(),anyString(),anyInt(), anyInt()))
				.thenReturn(vulnDetails);

		assertTrue(vulnerabilityController.getVulnerabilitiesOccurrences(request)
				.getStatusCode() == HttpStatus.OK);
	}
}
